//
//						metaSurface libFaust
//
ma = library("maths.lib");
ba = library("basics.lib");
de = library("delays.lib");
si = library("signals.lib");
an = library("analyzers.lib");
fi = library("filters.lib");
os = library("oscillators.lib");
no = library("noises.lib");
ef = library("misceffects.lib");
co = library("compressors.lib");
ve = library("vaeffects.lib");
pf = library("phaflangers.lib");
re = library("reverbs.lib");
en = library("envelopes.lib");
ro = library("routes.lib");

instrument=library("instruments.lib");

//-----------------------------------------------
// 			oberheim filters
//-----------------------------------------------
BPFOberheim = hgroup("oberheimBPF",ve.oberheimBPF(normFreq,Q)) with{
Q = vslider("Q",1,0.5,10,0.01);
normFreq = vslider("freq",0.5,0,1,0.001):si.smoo;
};
BSFOberheim=hgroup("oberheimBSF",ve.oberheimBSF(normFreq,Q)) with{
Q = vslider("Q",1,0.5,10,0.01);
normFreq = vslider("freq",0.5,0,1,0.001):si.smoo;
};

//-----------------------------------------------
// 			Chorus
//-----------------------------------------------
levelChorus	= vslider("level[name:Level]", 0.5, 0, 1, 0.01);
freqChorus	= vslider("freq[name:Freq]", 3, 0, 10, 0.01);
dtimeChorus	= vslider("delay[name:Delay]", 0.02, 0, 0.2, 0.01): si.smooth(0.999);
depthChorus	= vslider("depth[name:Depth]", 0.02, 0, 1, 0.01);

tbloscChorus(n,f,freqChorus,mod)	= (1-d)*rdtable(n,wform,i&(n-1)) +
			  d*rdtable(n,wform,(i+1)&(n-1))
with {
	wform 	= ba.time*(2.0*ma.PI)/n : f;
	phase		= freqChorus/ma.SR : (+ : ma.decimal) ~ _;
	modphase	= ma.decimal(phase+mod/(2*ma.PI))*n;
	i		= int(floor(modphase));
	d		= ma.decimal(modphase);
};

schorus(dtimeChorus,freqChorus,depthChorus,phase,x)
			= x+levelChorus*de.fdelay(1<<16, t, x)
with {
	t		= ma.SR*dtimeChorus/2*(1+depthChorus*tbloscChorus(1<<16, sin, freqChorus, phase));
};
chorus=_<:hgroup("Chorus", (left, right)):>_
with {
	left		= schorus(dtimeChorus,freqChorus,depthChorus,0);
	right		= schorus(dtimeChorus,freqChorus,depthChorus,ma.PI/2);
};
//----------------------------comb filter-------------------------
//
// #### Usage
//
// ```
// _: combfilter : _;
// ```
//------------------------------------------------------------
combfilter= vgroup("CombFilter",fi.fb_fcomb(maxdel,del,b0,aN))
 with {
	   maxdel = 1<<16;
	   freq = 1/(hslider("Frequency[acc:0 1 -10 0 10]", 2500,100,20000,0.001)):si.smooth(0.99);
	   del = freq *(ma.SR) : si.smooth(0.99);
	   b0 = 1;
	   aN = hslider("Intensity[acc:1 0 -10 0 10]", 80,0,100,0.01)*(0.01):si.smooth(0.99):min(0.999):max(0);
};
//----------------------------`(dm.)compressor_mono`-------------------------
// Compressor demo application.
//
// #### Usage
//
// ```
// _: compressor_demo : _;
// ```
//------------------------------------------------------------

compressor = ba.bypass1(cbp,compressor_mono)
with{
	comp_group(x) = vgroup("COMPRESSOR [tooltip: Reference:
		http://en.wikipedia.org/wiki/Dynamic_range_compression]", x);

	meter_group(x)	= comp_group(hgroup("[0]", x));
	knob_group(x)  = comp_group(hgroup("[1]", x));

	cbp = meter_group(checkbox("[0] Bypass	[tooltip: When this is checked, the compressor
		has no effect]"));
	compressor_mono =co.compressor_mono(ratio,threshold,attack,release) :*(makeupgain);

	ctl_group(x)  = knob_group(hgroup("[3] Compression Control", x));

	ratio = ctl_group(hslider("[0] Ratio [style:knob]
	[tooltip: A compression Ratio of N means that for each N dB increase in input
	signal level above Threshold, the output level goes up 1 dB]",
	5, 1, 20, 0.1));

	threshold = ctl_group(hslider("[1] Threshold [unit:dB] [style:knob]
	[tooltip: When the signal level exceeds the Threshold (in dB), its level
	is compressed according to the Ratio]",
	-30, -100, 10, 0.1));

	env_group(x)  = knob_group(hgroup("[4] Compression Response", x));

	attack = env_group(hslider("[1] Attack [unit:ms] [style:knob] [scale:log]
	[tooltip: Time constant in ms (1/e smoothing time) for the compression gain
	to approach (exponentially) a new lower target level (the compression
	`kicking in')]", 50, 1, 1000, 0.1)) : *(0.001) : max(1/ma.SR);

	release = env_group(hslider("[2] Release [unit:ms] [style: knob] [scale:log]
	[tooltip: Time constant in ms (1/e smoothing time) for the compression gain
	to approach (exponentially) a new higher target level (the compression
	'releasing')]", 500, 1, 1000, 0.1)) : *(0.001) : max(1/ma.SR);

	makeupgain = comp_group(hslider("[5] Makeup Gain [unit:dB]
	[tooltip: The compressed-signal output level is increased by this amount
	(in dB) to make up for the level lost due to compression]",
	1, -96, 96, 0.1)) : ba.db2linear;
};

//---------------------------------DELAY----------------------------
//
//  A stereo smooth delay with a feedback control
//  
//  This example shows how to use sdelay, a delay that doesn't
//  click and doesn't transpose when the delay time is changed
//
//------------------------------------------------------------------

delay = ba.bypass1(cbp,voice)
	with {
		delay_group(x) = vgroup("DELAY", x);
		cbp =delay_group(vgroup("[0]",checkbox("Bypass	[tooltip: When this is checked, Delay
		has no effect]")));
		voice   = delay_group(vgroup("[1]",(+ : de.sdelay(N, interp, dtime)) ~ *(fback)));
		N = int(2^19); 
		interp  = hslider("interpolation[unit:ms][style:knob]",10,1,100,0.1)*ma.SR/1000.0; 
		dtime   = hslider("delay[unit:ms][style:knob]", 0, 0, 5000, 0.1)*ma.SR/1000.0;
		fback   = hslider("feedback[style:knob]",0,0,100,0.1)/100.0; 
	};
	
//---------------------------------FLANGER----------------------------
// Flanger effect application.
//
// #### Usage
//
// ```
// _: flangerMono : _;
// ```
//------------------------------------------------------------
flangerMono =ba.bypass1(fbp,flanger_mono) 
with{
	flanger_group(x) = vgroup("FLANGER
		[tooltip: Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html]", x);
	meter_group(x) = flanger_group(hgroup("[0]", x));
	ctl_group(x)  = flanger_group(hgroup("[1]", x));
	del_group(x)  = flanger_group(hgroup("[2] Delay Controls", x));
	lvl_group(x)  = flanger_group(hgroup("[3]", x));

	fbp = meter_group(checkbox("[0] Bypass	[tooltip: When this is checked, the flanger
		has no effect]"));
	invert = meter_group(checkbox("[1] Invert Flange Sum"));

	// FIXME: This should be an amplitude-response display:
	flangeview = lfor(freq) + lfol(freq) : meter_group(hbargraph("[2] Flange LFO
		[style: led] [tooltip: Display sum of flange delays]", -1.5,+1.5));

	flanger_mono = *(level) :pf.flanger_mono(dmax,curdel1,depth,fb,invert);

	lfol = os.oscrs;
	lfor = os.oscrc;

	dmax = 2048;
	dflange = 0.001 * ma.SR *
		del_group(hslider("[1] Flange Delay [unit:ms] [style:knob]", 10, 0, 20, 0.001));
	odflange = 0.001 * ma.SR *
	del_group(hslider("[2] Delay Offset [unit:ms] [style:knob]", 1, 0, 20, 0.001));
	freq   = ctl_group(hslider("[1] Speed [unit:Hz] [style:knob]", 0.5, 0, 10, 0.01));
	depth  = ctl_group(hslider("[2] Depth [style:knob]", 1, 0, 1, 0.001));
	fb     = ctl_group(hslider("[3] Feedback [style:knob]", 0, -0.999, 0.999, 0.001));
	level  = lvl_group(hslider("Flanger Output Level [unit:dB]", 0, -60, 10, 0.1)):ba.db2linear;
	curdel1 = odflange+dflange*(1 + lfol(freq))/2;
	curdel2 = odflange+dflange*(1 + lfor(freq))/2;
};
//----------------------------`(dm.)freeverb`-------------------------
// Freeverb Mono.
//
// #### Usage
//
// ```
// _: freeverb_demo : _;
// ```
//------------------------------------------------------------
freeverb = ba.bypass1(fvbp,freeverbMono)
with{
	scaleroom   = 0.28;
	offsetroom  = 0.7;
	allpassfeed = 0.5;
	scaledamp   = 0.4;
	fixedgain   = 0.1;
	origSR = 48000;
	
   freeverbMono=_<: (*(g)*fixedgain :re.mono_freeverb(combfeed, allpassfeed, damping, spatSpread)),*(1-g):> _;
	parameters(x) = hgroup("Freeverb",x);
	
	knobGroup(x) = parameters(vgroup("[1]",x));
	fvbp = knobGroup(checkbox("[0] Bypass	[tooltip: When this is checked, the phaser
		has no effect]"));
	damping = knobGroup(vslider("[1] Damp [style: knob] [tooltip: Somehow control the
		density of the reverb.]",0.5, 0, 1, 0.025)*scaledamp*origSR/ma.SR);
	combfeed = knobGroup(vslider("[2] RoomSize [style: knob] [tooltip: The room size
		between 0 and 1 with 1 for the largest room.]", 0.5, 0, 1, 0.025)*scaleroom*
		origSR/ma.SR + offsetroom);
	spatSpread = knobGroup(vslider("[3] Stereo Spread [style: knob] [tooltip: Spatial
		spread between 0 and 1 with 1 for maximum spread.]",0.5,0,1,0.01)*46*ma.SR/origSR
		: int);
	g = parameters(vslider("[1] Wet [tooltip: The amount of reverb applied to the signal
		between 0 and 1 with 1 for the maximum amount of reverb.]", 0.3333, 0, 1, 0.025));
};

//----------------------------Fuzz Face-------------------------
//
//declare description "J Hendrix Fuzz Face simulation";
//declare insert_p "clipper";
//------------------------------------------------------------
fuzzface=hgroup("FuzeFace",pre :  fi.iir((b0/a0,b1/a0,b2/a0,b3/a0,b4/a0,b5/a0),(a1/a0,a2/a0,a3/a0,a4/a0,a5/a0)))   with {
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;
   // clip = tranystage(TB_7199P_68k,86.0,2700.0,3.571981) : tranystage(TB_7199P_68k,86.0,2700.0,3.571981) ;
   
        Level = vslider("Level[name:Level]", 0.1, 0, 1, 0.01) : Inverted(1)  : si.smooth(s);
    
        Fuzz = vslider("Fuzz[name:Fuzz]", 0.5, 0, 1, 0.01) : Inverted(1)  : si.smooth(s);
    
    b0 = Fuzz*(Fuzz*(Level*pow(fs,3)*(4.76991513499346e-20*fs + 5.38351707988916e-15) + pow(fs,3)*(-4.76991513499346e-20*fs - 5.38351707988916e-15)) + Level*pow(fs,3)*(-4.76991513499346e-20*fs + 5.00346713698171e-13) + pow(fs,3)*(4.76991513499346e-20*fs - 5.00346713698171e-13)) + Level*pow(fs,2)*(-5.05730339185222e-13*fs - 1.16162215422261e-12) + pow(fs,2)*(5.05730339185222e-13*fs + 1.16162215422261e-12);

    b1 = Fuzz*(Fuzz*(Level*pow(fs,3)*(-1.43097454049804e-19*fs - 5.38351707988916e-15) + pow(fs,3)*(1.43097454049804e-19*fs + 5.38351707988916e-15)) + Level*pow(fs,3)*(1.43097454049804e-19*fs - 5.00346713698171e-13) + pow(fs,3)*(-1.43097454049804e-19*fs + 5.00346713698171e-13)) + Level*pow(fs,2)*(5.05730339185222e-13*fs - 1.16162215422261e-12) + pow(fs,2)*(-5.05730339185222e-13*fs + 1.16162215422261e-12);

    b2 = Fuzz*(Fuzz*(Level*pow(fs,3)*(9.53983026998693e-20*fs - 1.07670341597783e-14) + pow(fs,3)*(-9.53983026998693e-20*fs + 1.07670341597783e-14)) + Level*pow(fs,3)*(-9.53983026998693e-20*fs - 1.00069342739634e-12) + pow(fs,3)*(9.53983026998693e-20*fs + 1.00069342739634e-12)) + Level*pow(fs,2)*(1.01146067837044e-12*fs + 2.32324430844522e-12) + pow(fs,2)*(-1.01146067837044e-12*fs - 2.32324430844522e-12);

    b3 = Fuzz*(Fuzz*(Level*pow(fs,3)*(9.53983026998693e-20*fs + 1.07670341597783e-14) + pow(fs,3)*(-9.53983026998693e-20*fs - 1.07670341597783e-14)) + Level*pow(fs,3)*(-9.53983026998693e-20*fs + 1.00069342739634e-12) + pow(fs,3)*(9.53983026998693e-20*fs - 1.00069342739634e-12)) + Level*pow(fs,2)*(-1.01146067837044e-12*fs + 2.32324430844522e-12) + pow(fs,2)*(1.01146067837044e-12*fs - 2.32324430844522e-12);

    b4 = Fuzz*(Fuzz*(Level*pow(fs,3)*(-1.43097454049804e-19*fs + 5.38351707988916e-15) + pow(fs,3)*(1.43097454049804e-19*fs - 5.38351707988916e-15)) + Level*pow(fs,3)*(1.43097454049804e-19*fs + 5.00346713698171e-13) + pow(fs,3)*(-1.43097454049804e-19*fs - 5.00346713698171e-13)) + Level*pow(fs,2)*(-5.05730339185222e-13*fs - 1.16162215422261e-12) + pow(fs,2)*(5.05730339185222e-13*fs + 1.16162215422261e-12);

    b5 = Fuzz*(Fuzz*(Level*pow(fs,3)*(4.76991513499346e-20*fs - 5.38351707988916e-15) + pow(fs,3)*(-4.76991513499346e-20*fs + 5.38351707988916e-15)) + Level*pow(fs,3)*(-4.76991513499346e-20*fs - 5.00346713698171e-13) + pow(fs,3)*(4.76991513499346e-20*fs + 5.00346713698171e-13)) + Level*pow(fs,2)*(5.05730339185222e-13*fs - 1.16162215422261e-12) + pow(fs,2)*(-5.05730339185222e-13*fs + 1.16162215422261e-12);

    a0 = Fuzz*(Fuzz*fs*(fs*(fs*(fs*(-3.73292075290073e-29*fs - 1.05633134620746e-20) - 3.11506369039915e-14) - 2.30719916990074e-11) - 1.07493164710329e-9) + fs*(fs*(fs*(fs*(3.73292075290073e-29*fs + 1.01643277726662e-20) + 2.91602352831988e-14) + 2.29636966370042e-11) + 1.07449105454163e-9)) + fs*(fs*(fs*(3.98985774247549e-22*fs + 1.99042653510896e-15) + 1.83615604104971e-13) + 5.31230624730483e-11) + 2.44402781742033e-9;

    a1 = Fuzz*(Fuzz*fs*(fs*(fs*(fs*(1.86646037645036e-28*fs + 3.16899403862238e-20) + 3.11506369039915e-14) - 2.30719916990074e-11) - 3.22479494130986e-9) + fs*(fs*(fs*(fs*(-1.86646037645036e-28*fs - 3.04929833179984e-20) - 2.91602352831988e-14) + 2.29636966370042e-11) + 3.22347316362488e-9)) + fs*(fs*(fs*(-1.19695732274265e-21*fs - 1.99042653510896e-15) + 1.83615604104971e-13) + 1.59369187419145e-10) + 1.22201390871017e-8;

    a2 = Fuzz*(Fuzz*fs*(fs*(fs*(fs*(-3.73292075290073e-28*fs - 2.11266269241492e-20) + 6.2301273807983e-14) + 4.61439833980148e-11) - 2.14986329420657e-9) + fs*(fs*(fs*(fs*(3.73292075290073e-28*fs + 2.03286555453323e-20) - 5.83204705663976e-14) - 4.59273932740084e-11) + 2.14898210908325e-9)) + fs*(fs*(fs*(7.97971548495099e-22*fs - 3.98085307021793e-15) - 3.67231208209942e-13) + 1.06246124946097e-10) + 2.44402781742033e-8;

    a3 = Fuzz*(Fuzz*fs*(fs*(fs*(fs*(3.73292075290073e-28*fs - 2.11266269241492e-20) - 6.2301273807983e-14) + 4.61439833980148e-11) + 2.14986329420657e-9) + fs*(fs*(fs*(fs*(-3.73292075290073e-28*fs + 2.03286555453323e-20) + 5.83204705663976e-14) - 4.59273932740084e-11) - 2.14898210908325e-9)) + fs*(fs*(fs*(7.97971548495099e-22*fs + 3.98085307021793e-15) - 3.67231208209942e-13) - 1.06246124946097e-10) + 2.44402781742033e-8;

    a4 = Fuzz*(Fuzz*fs*(fs*(fs*(fs*(-1.86646037645036e-28*fs + 3.16899403862238e-20) - 3.11506369039915e-14) - 2.30719916990074e-11) + 3.22479494130986e-9) + fs*(fs*(fs*(fs*(1.86646037645036e-28*fs - 3.04929833179984e-20) + 2.91602352831988e-14) + 2.29636966370042e-11) - 3.22347316362488e-9)) + fs*(fs*(fs*(-1.19695732274265e-21*fs + 1.99042653510896e-15) + 1.83615604104971e-13) - 1.59369187419145e-10) + 1.22201390871017e-8;

    a5 = Fuzz*(Fuzz*fs*(fs*(fs*(fs*(3.73292075290073e-29*fs - 1.05633134620746e-20) + 3.11506369039915e-14) - 2.30719916990074e-11) + 1.07493164710329e-9) + fs*(fs*(fs*(fs*(-3.73292075290073e-29*fs + 1.01643277726662e-20) - 2.91602352831988e-14) + 2.29636966370042e-11) - 1.07449105454163e-9)) + fs*(fs*(fs*(3.98985774247549e-22*fs - 1.99042653510896e-15) + 1.83615604104971e-13) - 5.31230624730483e-11) + 2.44402781742033e-9;
};
//-----------------------------------------------
// 			Gain
//-----------------------------------------------

simpleGain = ba.bypass1(vbp,vl)
with{
	groupV(x)=vgroup("Gain",x);
	vbp = groupV(checkbox("[0] Bypass	[tooltip: When this is checked, the phaser
		has no effect]"));
	gain=groupV(vslider("[1]", 0, 0, 4, 0.1) : si.smoo);
	vl=*(gain);
};

//--------------------------`(Grain generator`------------------------------


// FOR 4 grains - MONO

// UI //////////////////////////////////////////
grainGrp(x) = vgroup("GRANULATOR",x);
parGrain(x)=grainGrp(hgroup("[0]",x));
grainbp = parGrain(checkbox("[0] Bypass	[tooltip: When this is checked, the phaser
		has no effect]"));
ctGrain(x)=grainGrp(hgroup("[1]",x));
	
popul = 1 - ctGrain(vslider("population[BELA: ANALOG_0]", 1, 0, 1, 0.001));  // Coef 1= maximum; 0 = almost nothing (0.95)
taille = ctGrain(vslider("taille[BELA: ANALOG_1]", 100, 4, 200, 0.001 ));        // Size in millisecondes
decal = 1 - ctGrain(vslider("decal[BELA: ANALOG_2]",0,0,1,0.001));               // read position compared to table srite position

speed = ctGrain(vslider("speed[BELA: ANALOG_3]", 1, 0.125, 4, 0.001));

feedback = ctGrain(vslider("feedback[BELA: ANALOG_4]",0,0,2,0.001)); 

freq = 1000/taille;
tmpTaille = taille*ma.SR/ 1000;
clocSize = int(tmpTaille + (tmpTaille*popul*10)); // duration between 2 clicks

// CLK GENERAL /////////////////////////////////
// 4 clicks vers 4 generateurs de grains.
// (idem clk freq/4 et un compteur...)
detect1(x) = select2 (x < 10, 0, 1);
detect2(x) = select2 (x > clocSize*1/3, 0, 1) : select2 (x < (clocSize*1/3)+10, 0, _);
detect3(x) = select2 (x > clocSize*2/3, 0, 1) : select2 (x < (clocSize*2/3)+10, 0, _);
detect4(x) = select2 (x > clocSize-10, 0, 1);
cloc = (%(_,clocSize))~(+(1)) <: (detect1: trig),(detect2: trig),(detect3: trig),(detect4: trig);

// SIGNAUX Ctrls Player ////////////////////////
trig = _<:_,mem: >;
genvelop = *(2*ma.PI):+(ma.PI):cos:*(0.5):+(0.5);

rampe(f, t) = delta : (+ : select2(t,_,delta<0) : max(0)) ~ _ : raz
    with {
        raz(x) = select2 (x > 1, x, 0);
        delta = sh(f,t)/ma.SR;
        sh(x,t) = ba.sAndH(t,x);
    };

rampe2(speed, t) = delta : (+ : select2(t,_,delta<0) : max(0)) ~ _ 
    with {
        delta = sh(speed,t);
        sh(x,t) = ba.sAndH(t,x);
    };

// RWTable //////////////////////////////////////
unGrain(input, clk) = (linrwtable( wf , rindex) : *(0.2 * EnvGrain))
    with {
        SR = 44100;
        buffer_sec = 1;
        size = int(SR * buffer_sec);
        init = 0.;

        EnvGrain = clk : (rampe(freq) : genvelop);   

        windex = (%(_,size) ) ~ ( +(1) );
        posTabl = int(ba.sAndH(clk, windex));
        rindex = %(int(rampe2(speed, clk)) + posTabl + int(size * decal), size);

        wf = size, init, int(windex), input;
    };

// LINEAR_INTERPOLATION_RWTABLE //////////////////////////////////
// read rwtable with linear interpolation
// wf : waveform to read ( wf is defined by (size_buffer,init, windex, input ))
// x  : position to read (0 <= x < size(wf)) and float
// nota: rwtable(size, init, windex, input, rindex)

linrwtable(wf,x) = linterpolation(y0,y1,d)
    with {
        x0 = int(x);                //
        x1 = int(x+1);              //
        d  = x-x0;
        y0 = rwtable(wf,x0);        //
        y1 = rwtable(wf,x1);        //
        linterpolation(v0,v1,c) = v0*(1-c)+v1*c;
    };

// FINALISATION /////////////////////////////////////////////////////////////////////////////////////
routeur (a, b, c, d, e) = a, b, a, c, a, d, a, e;

processus = _ , cloc : routeur : (unGrain, unGrain, unGrain, unGrain) :> fi.dcblockerat(20);
grainGenerator=_<: ((+(_,_) :processus) ~(*(feedback))),((+(_,_) :processus) ~(*(feedback))):>_;
granulator=ba.bypass1(grainbp,grainGenerator);

//================ Butterworth Lowpass/Highpass Filters ======================
// Nth-order Butterworth lowpass or highpass filters
//
// USAGE: 
//   _ : lowpass(N,fc) : _
//   _ : highpass(N,fc) : _
// where
//   N = filter order (number of poles) [nonnegative constant integer]
//   fc = desired cut-off frequency (-3dB frequency) in Hz
// REFERENCE: 
//  https://ccrma.stanford.edu/~jos/filters/Butterworth_Lowpass_Design.html
//  'butter' function in Octave ("[z,p,g] = butter(N,1,'s');")
// ACKNOWLEDGMENT
//  Generalized recursive formulation initiated by Yann Orlarey.
filters=vgroup("FILTERS",ba.bypass1(fbp,hgroup("[1]",nHPF:nLPF))) with {
	nLPF=fi.lowpass(3,lfc)
	with {
		lfc=vslider("LPF Freq",1000, 20, 20000, 1);
	};
	nHPF=fi.highpass(3,hfc)
		with {
		hfc=vslider("HPF Freq",20, 20, 20000, 1);
	};
	fbp = checkbox("[0] Bypass  [tooltip: When this is checked, the filters
		has no effect]");
};
//-------------------------Modulation---------------------------
// 
//- Non Linear modulation processor
//- There are 5 different types of modulations available :
//==> 0, 1, 2 use the incoming signal to perform the modulation
//==> 3 uses the modulating frequency to modulate the sound
//==> 4 uses the default 220Hz frequency to modulate the sound
//
//- Pick a modulation type
//- Left/Right/Back = modulated sound
//- Front = No modulation
//- Head = minimum modulation intensity/ High modulating frequency
//- Bottom = maximum modulation intensity/ Low modulating frequency
//- Swing = change modulation intensity and modulating frequency
//
// ```
// _ : modulation :_;
// ```
//------------------------------------------------------------
NLFM = vgroup("Modulation", instrument.nonLinearModulator(nonlinearity,env,freq,typeMod,freqMod,order) ) with {
  gate = hslider("[1]ON/OFF (ASR Envelope)[acc:2 0 -10 0 10]", 1,0,1,1);

ASR =(en.asr(a,s,r,t))
	with {
		a = 1;
		s = 1;
		r = 1;
		t = gate;
		};

nonlinearity = hslider("[4]Modulation Intensity[acc:1 0 -10 0 10][style:knob]", 0.1, 0, 1, 0.001);
env = ASR;
freq = 220;
typeMod = hslider("[2]Modulation Type[style:radio{'0':0;'1':1;'2':2;'3':3;'4':4}]", 0, 0, 4, 1);
freqMod = hslider("[3]Modulating Frequency[acc:1 1 -10 0 10][style:knob][unit:Hz]", 204.8, 50, 1700, 0.1):si.smooth(0.999);
order = nlfOrder;
nlfOrder = 6;  
};

//-------------------------Moog Ladder---------------------------
// 
//
// ```
// _ : MoogLadder :_;
// ```
//------------------------------------------------------------
LadderMoog=hgroup("MoogLadder",ve.moogLadder(normFreq,Q)) with{
Q = vslider("Q",1,0.7072,25,0.01);
normFreq = vslider("freq",0.1,0,1,0.001):si.smoo;
};

//----------------------------------------------------
// Author: Romain Michon
// License: LGPL
//-------------------------`(dm.)moog_vcf_demo`---------------------------
// Illustrate and compare all three Moog VCF implementations above.
//
// #### Usage
//
// ```
// _ : moog_vcf_demo : _;
// ```
//------------------------------------------------------------
moog_vcf = ba.bypass1(moogbp,nvcf)
with{
	mvcf_group(x) = vgroup("MOOG VCF (Voltage Controlled Filter) [tooltip: See Faust's
		vaeffects.lib for info and references]",x);
	cb_group(x) = mvcf_group(hgroup("[0]",x));

	moogbp = cb_group(checkbox("[0] Bypass  [tooltip: When this is checked, the Moog VCF
		has no effect]"));
	archsw = cb_group(checkbox("[1] Use Biquads [tooltip: Select moog_vcf_2b (two-biquad)
		implementation, instead of the default moog_vcf (analog style) implementation]"));
	bqsw = cb_group(checkbox("[2] Normalized Ladders [tooltip: If using biquads, make
		them normalized ladders (moog_vcf_2bn)]"));

	freq = mvcf_group(hslider("[1] Corner Frequency [unit:PK] [tooltip: The VCF resonates
		at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).
		The VCF response is flat below the corner frequency, and rolls off -24 dB per
		octave above.]",
		25, 1, 88, 0.01) : ba.pianokey2hz) : si.smoo;

	res = mvcf_group(hslider("[2] Corner Resonance [style:knob] [tooltip: Amount of
		resonance near VCF corner frequency (specified between 0 and 1)]", 0.9, 0, 1, 0.01));

	outgain = mvcf_group(hslider("[3] VCF Output Level [unit:dB] [style:knob] [tooltip:
		output level in decibels]", 5, -60, 20, 0.1)) : ba.db2linear : si.smoo;

	vcfbq = _ <: select2(bqsw, ve.moog_vcf_2b(res,freq), ve.moog_vcf_2bn(res,freq));
	vcfarch = _ <: select2(archsw, ve.moog_vcf(res^4,freq), vcfbq);
	nvcf = vcfarch : *(outgain);
};
//--------------------------`(dm.)parametric_eq_demo`------------------------------
// A parametric equalizer application.
//
// #### Usage:
//
// ```
// _ : parametric_eq_demo : _ ;
// ```
//------------------------------------------------------------
parametric_eq = ba.bypass1(eqbp,fi.low_shelf(LL,FL) : fi.peak_eq(LP,FP,BP) : fi.high_shelf(LH,FH))
with{
	eq_group(x) = vgroup("[0] PARAMETRIC EQ SECTIONS [tooltip: See Faust's filters.lib for info and pointers]",x);
	ctrl_group(x) = eq_group(hgroup("[0] CTRL",x));
	
	eqbp = eq_group(checkbox("[0] Bypass	[tooltip: When this is checked, the phaser has no effect]"));
	ls_group(x) = ctrl_group(vgroup("[1] Low Shelf",x));
	
	
	LL = ls_group(hslider("[0] Low Boost_Cut [unit:dB] [style:knob]
		[tooltip: Amount of low-frequency boost or cut in decibels]",0,-40,40,0.1));
	FL = ls_group(hslider("[1] Transition Frequency [unit:Hz] [style:knob] [scale:log]
		[tooltip: Transition-frequency from boost (cut) to unity gain]",200,1,5000,1));

	pq_group(x) =  ctrl_group(vgroup("[2] Peaking Equalizer[tooltip: Parametric Equalizer
		sections from filters.lib]",x));
	LP = pq_group(hslider("[0] Peak Boost_Cut [unit:dB] [style:knob][tooltip: Amount of
		local boost or cut in decibels]",0,-40,40,0.1));
	FP = pq_group(hslider("[1] Peak Frequency [unit:PK] [style:knob] [tooltip: Peak
		Frequency in Piano Key (PK) units (A440 = 49PK)]",49,1,100,1)) : si.smooth(0.999)
		: ba.pianokey2hz;
	Q = pq_group(hslider("[2] Peak Q [style:knob] [scale:log] [tooltip: Quality factor
		(Q) of the peak = center-frequency/bandwidth]",40,1,1000,0.1));

	BP = FP/Q;

	hs_group(x) =  ctrl_group(vgroup("[3] High Shelf [tooltip: A high shelf provides a boost
		or cut above some frequency]",x));
	LH = hs_group(hslider("[0] High Boost_Cut [unit:dB] [style:knob] [tooltip: Amount of
		high-frequency boost or cut in decibels]",0,-40,40,.1));
	FH = hs_group(hslider("[1] Transition Frequency [unit:Hz] [style:knob] [scale:log]
	[tooltip: Transition-frequency from boost (cut) to unity gain]",8000,20,10000,1));
};

/* ===========Peak Equalizer ==============

- An Equalizer - or EQ - is used to cut or boost a designated peak frequency from a sound
- The Q - FILTER BANDWIDTH indicates in Hz the width of the frequency band around the peak frequency impacted by the cut or boost

- Front = Boosting effect/ Narrow band
- Back = Cutting effect/ Wide band
- Left = Low peak frequency
- Right = High peak frequency

*/


peakEqualizer=vgroup("PeakEq",fi.peak_eq(level,freq,Q))
    with {
        level = hslider("[2]Level[unit:dB][style:knob][acc:2 1 -10 0 10][tooltip: boost Level>0 or cut Level<0)", 0, -40, 32, 0.01):min(32):max(-40);
        freq = hslider("[1]Peak Frequency[unit:Hz][acc:0 1 -10 0 10][scale:log]", 440, 50, 11000, 0.01):si.smooth(0.999);
        Q = hslider("Q[unit:Hz][acc:2 0 -10 0 10]", 50, 20, 200, 1):si.smooth(0.999):min(200):max(20);
    };
//-------------------------(dm.)phaserMono---------------------------
// Phaser effect demo application.
//
// #### Usage
//
// ```
// _: phaserMono : _;
// ```
//------------------------------------------------------------
phaserMono =ba.bypass1(pbp,phaser_mono)
with{
	phaser2_group(x) = vgroup("PHASER [tooltip: Reference:
		https://ccrma.stanford.edu/~jos/pasp/Flanging.html]", x);
	meter_group(x) = phaser2_group(hgroup("[0]", x));
	ctl_group(x)  = phaser2_group(hgroup("[1]", x));
	nch_group(x)  = phaser2_group(hgroup("[2]", x));
	lvl_group(x)  = phaser2_group(hgroup("[3]", x));

	pbp = meter_group(checkbox("[0] Bypass	[tooltip: When this is checked, the phaser
		has no effect]"));
	invert = meter_group(checkbox("[1] Invert Internal Phaser Sum"));
	vibr = meter_group(checkbox("[2] Vibrato Mode")); // In this mode you can hear any "Doppler"

	// FIXME: This should be an amplitude-response display:
	// flangeview = phaser2_amp_resp : meter_group(hspectrumview("[2] Phaser Amplitude Response", 0,1));
	// phaser2_stereo_demo(x,y) = attach(x,flangeview),y : ...

	phaser_mono =*(level):pf.phaser2_mono(Notches,phase01,width,frqmin,fratio,frqmax,speed,mdepth,fb,invert);

	Notches = 4; // Compile-time parameter: 2 is typical for analog phaser stomp-boxes
   phase01=0;
	// FIXME: Add tooltips
	speed  = ctl_group(hslider("[1] Speed [unit:Hz] [style:knob]", 0.5, 0, 10, 0.001));
	depth  = ctl_group(hslider("[2] Notch Depth (Intensity) [style:knob]", 1, 0, 1, 0.001));
	fb     = ctl_group(hslider("[3] Feedback Gain [style:knob]", 0, -0.999, 0.999, 0.001));

	width  = nch_group(hslider("[1] Notch width [unit:Hz] [style:knob] [scale:log]",
		1000, 10, 5000, 1));
	frqmin = nch_group(hslider("[2] Min Notch1 Freq [unit:Hz] [style:knob] [scale:log]",
		100, 20, 5000, 1));
	frqmax = nch_group(hslider("[3] Max Notch1 Freq [unit:Hz] [style:knob] [scale:log]",
		800, 20, 10000, 1)) : max(frqmin);
	fratio = nch_group(hslider("[4] Notch Freq Ratio: NotchFreq(n+1)/NotchFreq(n) [style:knob]",
		1.5, 1.1, 4, 0.001));

	level  = lvl_group(hslider("Phaser Output Level [unit:dB]", 0, -60, 10, 0.1)) :
		ba.db2linear;

	mdepth = select2(vibr,depth,2); // Improve "ease of use"
};
 //--------------------------------------
 // Very simple real time pitch shifter
 //--------------------------------------
pitchshifter = vgroup("Pitch Shifter", ef.transpose(w,xf,sh)) with{
    w= vslider("window (samples)", 1000, 50, 10000, 1);
    xf=vslider("xfade (samples)", 10, 1, 10000, 1);
	sh=vslider("shift (semitones) ", 0, -12, +12, 0.1);
};
//-------------------------Ring modulator---------------------------
// Ring Modulator effect  application.
//
// #### Usage
//
// ```
// _:ringModulator : _;
// ```
//------------------------------------------------------------
ringModulator = ba.bypass1(rmbp,ringM)
with{
	groupRM(x)=vgroup("RING MODULATOR",x);
	rmbp = groupRM(checkbox("[0] Bypass	[tooltip: When this is checked, the phaser
		has no effect]"));
	ringM=groupRM(hgroup("[1]",*(1-rmdepth*(os.osc(rmfreq)*0.5+0.5))));
	
	rmfreq = vslider("frequency",5,0.1,1000,0.01) : si.smooth(0.999);
	rmdepth = vslider("depth",0,0,1,0.01) : si.smooth(0.999);
};
//----------------------`(dm.)mth_octave_spectral_level_demo`----------------------
// Demonstrate mth_octave_spectral_level in a standalone GUI.
//
// #### Usage
// ```
// _ : mth_octave_spectral_level_demo(BandsPerOctave);
// _ : spectral_level_demo : _; // 2/3 octave
// ```
//------------------------------------------------------------
// Coauthor: Yann Orlarey

mth_octave_spectral_level(BPO) =  octaveSpectral
with{
	M = BPO;
	ftop = 16000;
	Noct = 10; // number of octaves down from ftop
	
	// Lowest band-edge is at ftop*2^(-Noct+2) = 62.5 Hz when ftop=16 kHz:
	N = int(Noct*M); // without 'int()', segmentation fault observed for M=1.67
	spectralGrp(x)=vgroup("[0]",x);
	octaveSpectral=spectralGrp(an.mth_octave_spectral_level_default(M,ftop,N,tau,dB_offset));
	
	ctl_group(x)  = spectralGrp(hgroup("[1] SPECTRUM ANALYZER CONTROLS", x));
	
	tau = ctl_group(hslider("[0] Level Averaging Time [unit:ms] [scale:log]
		[tooltip: band-level averaging time in milliseconds]",
	100,1,10000,1)) * 0.001;
	dB_offset = ctl_group(hslider("[1] Level dB Offset [unit:dB]
	[tooltip: Level offset in decibels]",
	50,-50,100,1));
};

spectral_level = mth_octave_spectral_level(1.5); // 2/3 octave

//-------------------------Tremolo---------------------------
//
// #### Usage
//
// _:tremolo: _;
//
//------------------------------------------------------------

trem_R1 = 2700;
trem_Ra = 1e6;
trem_Rb = 300;
trem_b = exp(log(trem_Ra)/log(trem_Rb)) - exp(1);
trem_dTC = 0.06;
trem_minTC = log(0.005/trem_dTC);

trem_cds = ((_ <: _,_),_ : _+(1-alpha)*_) ~ (_<:*(alpha)) with {
    iSR = 1/ma.SR;
    dRC = trem_dTC * exp(*(trem_minTC));
    alpha = 1 - iSR / (dRC + iSR);
};

trem_vactrol = pow(_,1.9) : trem_cds : *(trem_b) + exp(1) : exp(log(trem_Ra)/log) : trem_R1/(_ +trem_R1);

/* triangle oscillator (not bandlimited, frequency is approximate) */

trem_trianglewave(freq) = _ ~ (_ <: _ + hyst) : /(periodsamps) with {
   if(c,t,e) = select2(c,e,t);
    hyst(x) = if(_ > 0, 2 * (x < periodsamps) - 1, 1 - 2 * (x > 0)) ~ _;
    periodsamps = int(ma.SR / (2*float(freq)));
};

/* tremolo unit, using triangle or sine oscillator as lfo */

stremolo(freq, depth) = lfo * depth + 1 - depth : trem_vactrol with {
    sine(freq) = (os.oscs(freq) + 1) / 2 : max(0); // max(0) because of numerical inaccuracy
    SINE=checkbox("SINE[enum:triangle|sine|square]");
    lfo = select3(SINE, trem_trianglewave(freq), sine(freq), os.lf_squarewavepos(freq));
};

trem_wet = vslider("wet_dry[name:Dry/Wet][tooltip:percentage of processed signal in output signal]",  100, 0, 100, 1) : /(100);
trem_dry = 1 - trem_wet;
tremolo=_<:hgroup("Tremolo",*(trem_dry),(*(trem_wet):*(stremolo(vslider("freq[name:Freq]",5,0.1,50,0.1),vslider("depth[name:Depth]",0.5,0,1,0.01))))):>_;


//-----------------------------------------------
// 			Volume
//-----------------------------------------------

volume = ba.bypass1(vbp,vl)
with{
	groupV(x)=vgroup("Volume",x);
	vbp = groupV(checkbox("[0] Bypass	[tooltip: When this is checked, the phaser
		has no effect]"));
	vgain=vslider("[1]", 0, -70, +4, 0.1) : ba.db2linear : si.smoo;
	vl=*(vgain);
};
//-----------------------------------------------
// 			wah
//-----------------------------------------------
wah4 = ba.bypass1(bp, ve.wah4(fr))
with{
    wah4_group(x) = hgroup("WAH4 [tooltip: Fourth-order wah effect made using moog_vcf]", x);
    bp = wah4_group(checkbox("[0] Bypass [tooltip: When this is checked, the wah pedal has
        no effect]"));
    fr = wah4_group(vslider("[1] Resonance Frequency [scale:log] [tooltip: wah resonance
        frequency in Hz]", 200,100,5000,1));
    // Avoid dc with the moog_vcf (amplitude too high when freq comes up from dc)
    // Also, avoid very high resonance frequencies (e.g., 5kHz or above).
};

//----------------------------`(re.)zita_rev1_stereo`---------------------------
// Extend `zita_rev_fdn` to include `zita_rev1` input/output mapping in stereo mode.
// `zita_rev1_stereo` is a standard Faust function.
//
// #### Usage
//
// ```
// _,_ : zita_rev1_stereo(rdel,f1,f2,t60dc,t60m,fsmax) : _,_
// ```
//
// Where:
//
// `rdel`  = delay (in ms) before reverberation begins (e.g., 0 to ~100 ms)
// (remaining args and refs as for `zita_rev_fdn` above)
//------------------------------------------------------------
zita_rev1 = _,_<: re.zita_rev1_stereo(rdel,f1,f2,t60dc,t60m,fsmax),_,_: out_eq,_,_:
    dry_wet : out_level
with{
    fsmax = 48000.0;  // highest sampling rate that will be used

    fdn_group(x) = hgroup(
    "[0] Zita_Rev1 [tooltip: ~ ZITA REV1 FEEDBACK DELAY NETWORK (FDN) & SCHROEDER
    ALLPASS-COMB REVERBERATOR (8x8). See Faust's reverbs.lib for documentation and
    references]", x);

    in_group(x) = fdn_group(hgroup("[1] Input", x));

    rdel = in_group(vslider("[1] In Delay [unit:ms] [style:knob] [tooltip: Delay in ms
        before reverberation begins]",60,20,100,1));

    freq_group(x) = fdn_group(hgroup("[2] Decay Times in Bands (see tooltips)", x));

    f1 = freq_group(vslider("[1] LF X [unit:Hz] [style:knob] [scale:log] [tooltip:
        Crossover frequency (Hz) separating low and middle frequencies]", 200, 50, 1000, 1));

    t60dc = freq_group(vslider("[2] Low RT60 [unit:s] [style:knob] [scale:log]
    [style:knob] [tooltip: T60 = time (in seconds) to decay 60dB in low-frequency band]",
    3, 1, 8, 0.1));

    t60m = freq_group(vslider("[3] Mid RT60 [unit:s] [style:knob] [scale:log] [tooltip:
        T60 = time (in seconds) to decay 60dB in middle band]",2, 1, 8, 0.1));

    f2 = freq_group(vslider("[4] HF Damping [unit:Hz] [style:knob] [scale:log]
    [tooltip: Frequency (Hz) at which the high-frequency T60 is half the middle-band's T60]",
    6000, 1500, 0.49*fsmax, 1));

    out_eq = pareq_stereo(eq1f,eq1l,eq1q) : pareq_stereo(eq2f,eq2l,eq2q);
    // Zolzer style peaking eq (not used in zita-rev1) (filters.lib):
    // pareq_stereo(eqf,eql,Q) = peak_eq(eql,eqf,eqf/Q), peak_eq(eql,eqf,eqf/Q);
    // Regalia-Mitra peaking eq with "Q" hard-wired near sqrt(g)/2 (filters.lib):
    pareq_stereo(eqf,eql,Q) = fi.peak_eq_rm(eql,eqf,tpbt), fi.peak_eq_rm(eql,eqf,tpbt)
    with {
        tpbt = wcT/sqrt(max(0,g)); // tan(PI*B/SR), B bw in Hz (Q^2 ~ g/4)
        wcT = 2*ma.PI*eqf/ma.SR;  // peak frequency in rad/sample
        g = ba.db2linear(eql); // peak gain
    };

    eq1_group(x) = fdn_group(hgroup("[3] RM Peaking Equalizer 1", x));

    eq1f = eq1_group(vslider("[1] Eq1 Freq [unit:Hz] [style:knob] [scale:log] [tooltip:
        Center-frequency of second-order Regalia-Mitra peaking equalizer section 1]",
    315, 40, 2500, 1));

    eq1l = eq1_group(vslider("[2] Eq1 Level [unit:dB] [style:knob] [tooltip: Peak level
        in dB of second-order Regalia-Mitra peaking equalizer section 1]", 0, -15, 15, 0.1));

    eq1q = eq1_group(vslider("[3] Eq1 Q [style:knob] [tooltip: Q = centerFrequency/bandwidth
        of second-order peaking equalizer section 1]", 3, 0.1, 10, 0.1));

    eq2_group(x) = fdn_group(hgroup("[4] RM Peaking Equalizer 2", x));

    eq2f = eq2_group(vslider("[1] Eq2 Freq [unit:Hz] [style:knob] [scale:log] [tooltip:
        Center-frequency of second-order Regalia-Mitra peaking equalizer section 2]",
    1500, 160, 10000, 1));

    eq2l = eq2_group(vslider("[2] Eq2 Level [unit:dB] [style:knob] [tooltip: Peak level
        in dB of second-order Regalia-Mitra peaking equalizer section 2]", 0, -15, 15, 0.1));

    eq2q = eq2_group(vslider("[3] Eq2 Q [style:knob] [tooltip: Q = centerFrequency/bandwidth
        of second-order peaking equalizer section 2]", 3, 0.1, 10, 0.1));

    out_group(x) = fdn_group(hgroup("[5] Output", x));

    dry_wet(x,y) = *(wet) + dry*x, *(wet) + dry*y with {
        wet = 0.5*(drywet+1.0);
        dry = 1.0-wet;
    };

    drywet = out_group(vslider("[1] Dry/Wet Mix [style:knob] [tooltip: -1 = dry, 1 = wet]",
    0, -1.0, 1.0, 0.01)) : si.smoo;

    out_level = *(gain),*(gain);

    gain = out_group(vslider("[2] Level [unit:dB] [style:knob] [tooltip: Output scale
        factor]", -20, -70, 40, 0.1)) : ba.db2linear : si.smoo;
};
zitaReverb=_<:zita_rev1:>_;
